# -*- coding: utf-8 -*-
"""RSA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zwOyCXTWXbctNLMASy_OLDN5nSnWleqc

# **IMPLMENTING THE RSA ALGORITHM**
"""

import pandas as pd

def nearestPrime(text):
    n = len(text)
    # print('ORIGINAL LENGTH:', n)
    diff = 0
    notPrime = False
    while(True):
        notPrime = False
        for i in range(2, n-diff):
            if ((n-diff) % i==0):
                notPrime = True
                break

        if(not notPrime):
            return n-diff
        
        for i in range(2, n+diff):
            if ((n+diff) % i==0):
                notPrime = True
                break

        if(not notPrime):
            return n-diff

        if(notPrime):
            diff+=1
            notPrime=False

    return n

def gcd(X, Y):
    if (Y==0):
        return X
    
    R = X % Y
    return gcd(Y, R)

def findD(E, T):
    a = [1, 0]
    b = [0, 1]
    d = [T, E]
    k = ['-', T//E]

    while(d[-1] != 1):
        # print(a,b,d,k)
        a.append(a[-2] - a[-1]*k[-1])
        b.append(b[-2] - b[-1]*k[-1])
        d.append(d[-2] % d[-1])
        k.append(d[-2] // d[-1])
    
    # print(a,b,d,k)

    data = {'A':a, 'B':b, 'D':d, 'K':k}
    df = pd.DataFrame(data, index=[i for i in range(len(a))])
    D = b[-1]
    if(D<0):
        D += T
    return D, df

def totient(p,q):
    return (p-1) * (q-1)

def encryption(PT, e, n):
    return (PT**e) % n

def decryption(CT, d, n):
    return (CT**d) % n

def RSA(p_text, q_text, PT, e=None):
    p = nearestPrime(p_text)

    q = nearestPrime(q_text)
    while(p==q):
        q_text += '0'
        q = nearestPrime(q_text)
    
    print('VALUE OF p =', p)
    print('VALUE OF q =', q)

    n = p * q
    print('\nVALUE OF n =', n)

    t_n = totient(p,q)
    print('VALUE OF T(n) =', t_n)

    if(e == None):
        e = 2
        while(gcd(t_n, e)!=1 and e!=p and e!=q):
            e += 1

    print('\nVALUE OF e =', e)

    d, df = findD(e, t_n)
    print('\nFINDING THE VALUE OF d\n')
    print(df)
    print('\nVALUE OF d =', d)

    if (PT >= t_n):
        PT = PT % t_n

    CT = encryption(PT, e, n)
    rcvdPT = decryption(CT, d, n)

    print('\nENTERED PT:', PT)
    print('\nCIPHERED PT:', CT)
    print('DECRYPTED PT:', rcvdPT)

p_text = '1234567'
q_text = '123456787901'
PT = 25

e = 17
RSA(p_text, q_text, PT, e)

p_text = '123'
q_text = '123456787901'
PT = 12

e = 7
RSA(p_text, q_text, PT, e)

