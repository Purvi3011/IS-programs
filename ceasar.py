# -*- coding: utf-8 -*-
"""CEASAR.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HqFMJI-E2a8MWWpoR06tBRilZsWL734e
"""

import pandas as pd

"""## **CAESAR CIPHER**"""

num = '0123456789'
lower = 'abcdefghijklmnopqrstuvwxyz'
upper = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'

"""### **ENCRYPTION**"""

def encryption(pt, key):
    ct = ''
    for char in pt:
        if char in lower:
            inx = lower.index(char)
            ct += lower[(inx+key)%26]
        
        elif char in upper:
            inx = upper.index(char)
            ct += upper[(inx+key)%26]

        elif char == ' ':
            ct += ' '
            
        elif char in num:
            inx = num.index(char)
            ct += num[(inx+key)%10]
        
        else:
            ct += char

    return ct

"""### **DECRYPTION**"""

def decryption(ct, key):
    pt = ''
    for char in ct:
        if char in lower:
            inx = lower.index(char)
            pt += lower[(inx-key+26)%26]
        
        elif char in upper:
            inx = upper.index(char)
            pt += upper[(inx-key+26)%26]

        elif char == ' ':
            pt += ' '

        elif char in num:
            inx = num.index(char)
            pt += num[(inx-key+10)%10]

        else:
            pt += char

    return pt

"""### **TESTING AGAINST INPUT**"""

pt = input('ENTER INPUT STRING: ')
 key = int(input('ENTER ENCRYPTION KEY: '))

#pt = 'Txypevcb{vc~xyd;7Nxb7ver7xyr7dcrg7t{xdre7cx797979'
#key = 11

print('\nORIGINAL TEXT:', pt)

ct = encryption(pt, key)
print('\nENCRYPTED TEXT:', ct)

new_pt = decryption(ct, key)
print('\nDECRYPTED TEXT:', new_pt)

"""### **BRUTE FORCE**"""

def brute_force(ct):
    for key in range(1, 27):
        pt = decryption(ct, key)
        print(f'FOR KEY = {key}, PLAIN TEXT = {pt}')

brute_force(ct)

"""### **DECRYPTING CUSTOM INPUTS**"""

brute_force('guvf fhowrpg vf ernyyl vagrerfgvat')

brute_force('vkrmhzktiarftdxlmaxmxqmkhunlm')

ct = encryption('ATTACK ON HOUR 20', 4)
print('\nENCRYPTED TEXT:', ct)

brute_force(ct)

"""## **ADDITIONAL - VIGENERE CIPHER**"""

alphabets = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'

alpha = {}
for i, char in enumerate(alphabets):
    alpha[char] = i

key_list = list(alpha.keys())
val_list = list(alpha.values())

print(alpha)

cipher = {
    'A':'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
}

for key in range(1,26):
    ct = encryption(cipher['A'], key)
    cipher[ct[0]] = ct

print(cipher)

def vigenere_encryption(pt, key):
    ct = ''
    n = len(pt)
    for row, col in zip(pt,key):
        if row == ' ':
            ct += ' '
        else:
            inx = alpha[col]
            ct += cipher[row][inx]

    return ct

def vigenere_decryption(ct, key):
    pt = ''
    n = len(ct)
    for col, row in zip(ct,key):
        if (col == ' '):
            pt += ' '
        else:
            inx = cipher[row].index(col)
            pt += key_list[val_list.index(inx)]

    return pt

pt = input('ENTER INPUT STRING: ')
key = input('ENTER ENCRYPTION KEY: ')
#pt = 'JIZGIELULTAAVEWGFNMYUGUEHAWHBCKGOGRTDCNHBVHN'
#key = 'CONGRATULATIONS'
#key = 'BNMFQZSTKZSHNMR'
# CT = CPPJ
while ( len(key) < len(pt) ):
    key += key

key = key[:len(pt)]

print('PLAIN TEXT:',pt)
print('KEY:', key)

ct = vigenere_encryption(pt, key)
print('CIPHERED TEXT:', ct)

new_pt = vigenere_decryption(ct, key)
print('DECIPHERED TEXT:', new_pt)

