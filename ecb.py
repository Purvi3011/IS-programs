# -*- coding: utf-8 -*-
"""ECB.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XonndLei1Q-P66KDsSxwx3wVyWVd89kL
"""

# Add String here to Encrypt and Decrypt
plain = input("Enter you string:")
ascii_chars = []
binary = []
encrypted = []
for char in plain:
 # Converting characters into ascii values
 ascii_chars.append(ord(char))
 # Converting ascii values into 16 bit binary
 grp_16 = bin(ord(char))[2:]
 binary.append(grp_16)

 # Taking t=1 for circular left shift
 text = grp_16[1:] + grp_16[0]
 if len(text)==6:
 # print("6: "+text)
  text = "0" + text
  encrypted.append(text)
 else:
  encrypted.append(text)
# Taking key to perform XOR with
key = 65
# Converting key into 16 but binary, we can take key which is 16 bit only
binary_key = bin(key)[2:]
print("Binary Key: " + binary_key)
print(f"Key Type: {type(binary_key)}")
print(ascii_chars)
print(binary)
print(encrypted)

# Applying XOR
msg = []
encrypt = []
for num in encrypted:
 xor = int(num, 2)^int(binary_key, 2)
 msg.append(xor)
 encrypt.append(chr(xor))
print(msg)
print(encrypt)
encrypted_text = ''.join(char for char in encrypt)
print(encrypted_text)

real = []
shifted_binary = []
original_binary = []
plainText = []
# Backtracking XOR
for num in msg:
 # Converting into original decimal
 xor_rev = int(num)^int(binary_key, 2)
 real.append(xor_rev)
 # Converting those decimal into og circular shifted binary
 text = ''
 if len(bin(xor_rev)[2:]) < 7:
  text = '0'*(7 - len(bin(xor_rev)[2:])) + bin(xor_rev)[2:]
 # print(text)
  shifted_binary.append(text)
 else:
  text = bin(xor_rev)[2:]
  shifted_binary.append(bin(xor_rev)[2:])

 # Circular Shift Right for decryption by t=1
 new_text = text[-1] + text[0:-1]
 original_binary.append(new_text)
 # Getting our Plain Text
 decimal = int(new_text, 2)
 if chr(decimal) == "@":
  plainText.append(" ")
 else:
  plainText.append(chr(decimal))
print(real)
print(shifted_binary)
print(original_binary)
print(plainText)
print(f"\nDecrypted Text with Key={key} is: \n")
print(''.join(char for char in plainText))